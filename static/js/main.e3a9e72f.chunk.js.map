{"version":3,"sources":["UserCard.js","App.js","serviceWorker.js","index.js"],"names":["UserCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","followers","following","image","repo","msg","nextProps","setState","message","_this$state","react_default","a","createElement","className","src","height","width","alt","Component","App","username","handleChange","e","target","value","handleSubmit","keyCode","usernameVal","fetch","concat","then","res","json","data","console","log","avatar_url","public_repos","type","placeholder","onChange","onKeyDown","autoFocus","src_UserCard_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3a9e72f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./UserCard.css\";\r\n\r\nclass UserCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      followers: null,\r\n      following: null,\r\n      image: \"\",\r\n      repo: null,\r\n      msg: \"\"\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.name !== this.props.name) {\r\n      this.setState({\r\n        name: nextProps.name,\r\n        followers: nextProps.followers,\r\n        following: nextProps.following,\r\n        image: nextProps.image,\r\n        repo: nextProps.repo,\r\n        msg: nextProps.message\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let { name, followers, following, image, repo, msg } = this.state;\r\n    if (msg === \"Not Found\")\r\n      return (\r\n        <div className=\"MainCard\">\r\n          <div className=\"gitInfo\">\r\n            <p>\r\n              <strong>Oops!</strong> We could not find what you are looking for.\r\n              Please check whether the username is correct.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    else if (msg === \"\")\r\n      return (\r\n        <div className=\"MainCard\">\r\n          <div className=\"gitInfo\">\r\n            <p>\r\n              Enter Github username in the search box to get info about the\r\n              user.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    else\r\n      return (\r\n        <div className=\"MainCard\">\r\n          <div className=\"gitProfile\">\r\n            <h4>{name}</h4>\r\n            <img\r\n              src={image}\r\n              height=\"70px\"\r\n              width=\"70px\"\r\n              alt=\"userProfileImage\"\r\n            />\r\n          </div>\r\n          <div className=\"gitInfo\">\r\n            <div>\r\n              <i className=\"fa fa-users\" />\r\n              <span>{followers}</span>\r\n              <span>Followers</span>\r\n            </div>\r\n            <div>\r\n              <i className=\"fa fa-folder-open\" />\r\n              <span>{repo}</span>\r\n              <span>Repositories</span>\r\n            </div>\r\n            <div>\r\n              <i className=\"fa fa-user\" />\r\n              <span>{following}</span>\r\n              <span>Following</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default UserCard;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport UserCard from \"./UserCard\";\n\nclass App extends Component {\n  state = {\n    username: \"\",\n    name: \"\",\n    followers: null,\n    following: null,\n    image: \"\",\n    repo: null,\n    msg: \"\"\n  };\n\n  handleChange = e => {\n    this.setState({\n      username: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    if (e.keyCode === 13) {\n      let usernameVal = e.target.value;\n      fetch(`https://api.github.com/users/${usernameVal}`)\n        .then(res => res.json())\n        .then(data => {\n          console.log(data);\n          this.setState({\n            username: \"\",\n            name: data.name,\n            followers: data.followers,\n            following: data.following,\n            image: data.avatar_url,\n            repo: data.public_repos,\n            msg: data.message\n          });\n        });\n    }\n  };\n\n  render() {\n    let { username, name, followers, following, image, repo, msg } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"App-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter username here\"\n            onChange={this.handleChange}\n            onKeyDown={this.handleSubmit}\n            value={username}\n            autoFocus\n          />\n          <UserCard\n            name={name}\n            followers={followers}\n            following={following}\n            repo={repo}\n            image={image}\n            message={msg}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}